#/usr/bin/env python
'''
Run as command line script, accepts pylearn2 model file (pkl) and 
csv file of data to encode as rows with ncol=nvis of model.  
Script extracts parameters for all but last layer from
model file, and uses them (and default sigmoid activation funcition)
to output code (activation of penultimate layer) for each input example
'''
import sys
import pdb
import re
import argparse
import numpy as np
import cPickle as pickle

def extractmod(pklfn):
    '''
    extracts weights and biases of first n-1 layers of n layer mlp saved by pylearn2 in file named 'pklfn'.  
    returns list formated as:  [[layer1_w, layer1_b],[layer2_w,layer2_b]..]
    '''
    outlst=[]
    mod=pickle.load(open(pklfn,'rb'))
    numlayers=len(mod.layers)
    for l in range(numlayers-1):  #do not extract top siamese metric layer
        lnm=mod.layers[l].layer_name
        w,b=mod.layers[l].get_params()
        outlst.append([w.get_value(),b.get_value()])
    return outlst

def sigmoid(z):
    return 1./(1.+np.exp(-z))

def modelfprop(mod,dat,binarycode=False,actfn='sigmoid'):
    '''
    forward propagate sigmoid mlp implicit in list mod generated by extractmod
    inputs: mod - extractmod output, dat - np.ndarray of data to apply model to, binarycode - bool or numeric (0-1) threshold for sigmoid units to binarize output, actfn is activation funciton to use on all layers
    output: np.ndarray of encoding of input data
    '''
    input=dat
    for l in mod:
        linear=np.dot(input,l[0])+l[1]
        if actfn=='sigmoid':
            activation=sigmoid(linear)
        elif actfn=='linear':
            activation=linear
        else:
            raise ValueError(acfn+' not implemented')
        input=activation
    if binarycode:
        if binarycode.__class__=='float':
            thresh=binarycode
        else:
            thresh=0.5
        activation=activation>thresh
    return activation

if __name__=='__main__':
    argpars=argparse.ArgumentParser(description='generate encoding based on pylearn2 model')
    argpars.add_argument('pklfn',help='model file, pylearn2 output')
    argpars.add_argument('csvfn',help='new data file')
    argpars.add_argument('-b',help='binarize output: bool or float threshold')
    argpars.add_argument('-a',help='activation function: sigmoid or linear')
    args=argpars.parse_args()
    if args.b:
        binaryout=args.b
    else:
        binaryout=False
    if args.a:
        activation=args.a
    else:
        activation='sigmoid'
    #if len(sys.argv)==4:
    #    pklfn,csvfn,binaryout=sys.argv[1:]
    #elif len(sys.argv)==3:
    #    pklfn,csvfn=sys.argv[1:]
    #    binaryout=False
    #else:
    #    raise inputerror('2 or 3 command line arguments needed')
    csvprefix=re.sub('[^/]*/*(\w+)\.csv',r'\1',args.csvfn)
    pklprefix=re.sub('[^/]*/*(\w+)\.pkl',r'\1',args.pklfn)
    mod=extractmod(args.pklfn)
    dat=np.loadtxt(args.csvfn,delimiter=',')
    out=modelfprop(mod,dat,binaryout,activation)
    if binaryout:
        np.savetxt(csvprefix+'_code_'+pklprefix+'.csv',out,delimiter=',',fmt='%.0f')
    else:
        np.savetxt(csvprefix+'_code_'+pklprefix+'.csv',out,delimiter=',')
